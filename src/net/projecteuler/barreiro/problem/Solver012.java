/* COPYRIGHT (C) 2014 barreiro. All Rights Reserved. */

package net.projecteuler.barreiro.problem;

import static java.lang.Math.sqrt;
import static java.util.stream.LongStream.rangeClosed;
import static java.util.stream.Stream.iterate;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <p/>
 * Let us list the factors of the first seven triangle numbers: <pre>
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28 </pre>
 * We can see that 28 is the first triangle number to have over five divisors.
 * <p/>
 * What is the value of the first triangle number to have over five hundred divisors?
 *
 * @author barreiro
 */
public class Solver012 extends ProjectEulerSolver {

    public Solver012() {
        this(500);
    }

    public Solver012(long n) {
        super(n);
    }

    /* --- */

    public long solve() {
        return iterate(1L, l -> l + 1).parallel().map(l -> (l * (l + 1)) / 2).filter(t -> {
            // We need to adjust the number of divisors if the number is a perfect square
            long ceiling = (long) sqrt(t), divisors = (ceiling * ceiling == t) ? -1 : 0;
            divisors += rangeClosed(1, ceiling).filter(f -> t % f == 0).count() * 2;
            return divisors >= N;
        }).findFirst().get();
    }

}
