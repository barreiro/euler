/* COPYRIGHT (C) 2014 barreiro. All Rights Reserved. */

package net.projecteuler.barreiro.problem;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import static java.util.stream.LongStream.rangeClosed;
import static net.projecteuler.barreiro.algorithm.Primes.primeFactors;

/**
 * Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
 * <p>
 * 2^2=4, 2^3=8, 2^4=16, 2^5=32
 * 3^2=9, 3^3=27, 3^4=81, 3^5=243
 * 4^2=16, 4^3=64, 4^4=256, 4^5=1024
 * 5^2=25, 5^3=125, 5^4=625, 5^5=3125
 * <p>
 * If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
 * <p>
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 * <p>
 * How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
 *
 * @author barreiro
 */
public class Solver029 extends ProjectEulerSolver {

    public Solver029() {
        this(100);
    }

    public Solver029(long n) {
        super(n);
    }

    /* --- */

    public long solve() {
        Set<Map<Long, Long>> factorsSet = new HashSet<>();

        rangeClosed(2, N).forEach(a -> rangeClosed(2, N).forEach(b -> {
            Map<Long, Long> factors = primeFactors(a);
            factors.replaceAll((k, v) -> v * b);
            factorsSet.add(factors);
        }));

        return factorsSet.size();
    }

}
