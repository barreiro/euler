// COPYRIGHT (C) 2017 barreiro. All Rights Reserved.
// Rust solvers for Project Euler problems

use euler::algorithm::long::{hexagonal, is_pentagonal};
use euler::Solver;

// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
//
// Triangle T(n) = n * (n+1) / 2  -> 1, 3, 6, 10, 15, ...
// Pentagonal P(n) = n * (3*n−1) / 2 -> 1, 5, 12, 22, 35, ...
// Hexagonal H(n) = n * (2*n−1) -> 1, 6, 15, 28, 45, ...
//
// It can be verified that T 285 = P 165 = H 143 = 40755.
// Find the next triangle number that is also pentagonal and hexagonal.

pub struct Solver045 {
    pub n: isize
}

impl Default for Solver045 {
    fn default() -> Self {
        Solver045 { n: 144 }
    }
}

impl Solver for Solver045 {
    fn solve(&self) -> isize {
        // all hexagonal numbers are also triangle numbers
        (self.n..).map(hexagonal).find(is_pentagonal).unwrap()
    }
}
