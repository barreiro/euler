// COPYRIGHT (C) 2017 barreiro. All Rights Reserved.
// Rust solvers for Project Euler problems

use euler::algorithm::factor::number_of_factors;
use euler::algorithm::long::arithmetic_sum;
use euler::Solver;

// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

pub struct Solver012 {
    pub n: isize
}

impl Default for Solver012 {
    fn default() -> Self {
        Solver012 { n: 500 }
    }
}

impl Solver for Solver012 {
    fn solve(&self) -> isize {
        loop {
            for value in self.n - 1.. {
                if number_of_factors(arithmetic_sum(value)) >= self.n {
                    return arithmetic_sum(value);
                }
            }
        }
    }
}
