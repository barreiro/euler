// COPYRIGHT (C) 2017 barreiro. All Rights Reserved.
// Rust solvers for Project Euler problems

use std::iter::from_fn;
use algorithm::filter::less_than;
use Solver;

/// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
///
/// By starting with `1` and `2`, the first `10` terms will be: `1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ..`.
///
/// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
pub struct Solver002 {
    pub n: i64
}

impl Default for Solver002 {
    fn default() -> Self {
        Self { n: 4_000_000 }
    }
}

impl Solver for Solver002 {
    fn problem_name(&self) -> &str { "Even fibonacci numbers" }

    fn solve(&self) -> i64 {
        even_fibonacci().take_while(less_than(self.n)).sum()
    }
}

// --- //

// iterator on the even terms of the Fibonacci sequence
fn even_fibonacci() -> impl Iterator<Item=i64> {
    let (mut even ,mut odd) = (0, 1);
    from_fn(move || {
        even += odd * 2;
        odd = (even * 2) - odd;
        Some(even)
    })
}
