// COPYRIGHT (C) 2017 barreiro. All Rights Reserved.
// Rust solvers for Project Euler problems

use euler::Solver;

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

pub struct Solver002 {
    pub n: isize
}

impl Default for Solver002 {
    fn default() -> Self {
        Solver002 { n: 4_000_000 }
    }
}

impl Solver for Solver002 {
    fn solve(&self) -> isize {
        even_fibonacci().take_while(|&f| f < self.n).sum()
    }
}

// --- //

/// iterator on the even terms of the Fibonacci sequence
fn even_fibonacci() -> impl Iterator<Item=isize> {
    EvenFibonacci { even: 0, odd: 1 }
}

struct EvenFibonacci {
    even: isize,
    odd: isize,
}

impl Iterator for EvenFibonacci {
    type Item = isize;

    fn next(&mut self) -> Option<Self::Item> {
        self.even += self.odd << 1;
        self.odd = (self.even << 1) - self.odd;
        Some(self.even)
    }
}
