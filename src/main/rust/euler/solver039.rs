// COPYRIGHT (C) 2017 barreiro. All Rights Reserved.
// Rust solvers for Project Euler problems

use euler::algorithm::long::int_sqrt;
use euler::Solver;

// If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.
// {20,48,52}, {24,45,51}, {30,40,50}
// For which value of p â‰¤ 1000, is the number of solutions maximised?

pub struct Solver039 {
    pub n: isize,
}

impl Default for Solver039 {
    fn default() -> Self {
        Solver039 { n: 1000 }
    }
}

impl Solver for Solver039 {
    fn solve(&self) -> isize {
        (12..self.n).max_by_key(|&p| pythagorean_triples(p)).unwrap()
    }
}

fn pythagorean_triples(value: isize) -> isize {
    // solved with Euclides Formula --- a=m^2-n^2 --- b=2nm --- c=m^2+n^2 --- with m>n>0
    // Euclides Formula does not generate all triples, only 'primitive' ones, therefore there is a need to check if exists a factor
    // odd factors generate triples that are 'rotations' of ones generated by Euclides Formula and must be excluded

    let mut count = 0;
    for m in 2..int_sqrt(value) {
        for n in 1..m {
            let sum = m * m - n * n + 2 * m * n + m * m + n * n;
            if value == sum || value % sum == 0 && (value / sum) & 1 != 0 {
                count += 1;
            }
        }
    }
    count
}
