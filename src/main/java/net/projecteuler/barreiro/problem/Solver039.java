/* COPYRIGHT (C) 2014 barreiro. All Rights Reserved. */

package net.projecteuler.barreiro.problem;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import static java.util.Comparator.comparingLong;
import static java.util.stream.LongStream.range;
import static net.projecteuler.barreiro.algorithm.util.LongUtils.intSqrt;
import static net.projecteuler.barreiro.algorithm.util.LongUtils.odd;

/**
 * If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.
 * <p>
 * {20,48,52}, {24,45,51}, {30,40,50}
 * <p>
 * For which value of p â‰¤ 1000, is the number of solutions maximised?
 *
 * @author barreiro
 */
public class Solver039 extends ProjectEulerSolver {

    private static final Map<Long, Long> PYTHAGOREAN_TRIPLE_CACHE = new ConcurrentHashMap<>();

    public Solver039() {
        this( 1000 );
    }

    public Solver039(long n) {
        super( n );
    }

    // --- //

    private static long pythagoreanTriples(long l) {
        // solved with Euclides Formula --- a=m^2-n^2 --- b=2nm --- c=m^2+n^2 --- with m>n>0
        // Euclides Formula does not generate all triples, only 'primitive' ones, therefore there is a need to check if exists a factor
        // odd factors generate triples that are 'rotations' of ones generated by Euclides Formula and must be excluded

        return PYTHAGOREAN_TRIPLE_CACHE.computeIfAbsent( l, value ->
                range( 2, intSqrt( value ) ).filter( m -> range( 1, m ).filter( n -> {
                    long sum = m * m - n * n + 2 * m * n + m * m + n * n;
                    return value == sum || value % sum == 0 && odd( value / sum );
                } ).count() != 0 ).count() );
    }

    public long solve() {
        return range( 12, N ).boxed().max( comparingLong( Solver039::pythagoreanTriples ) ).orElse( 0L );
    }
}
